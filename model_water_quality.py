# -*- coding: utf-8 -*-
"""model_water_quality.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aWu04asidikASEldDoDx9BRVAGc8m3ml
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation,Dropout

data = pd.read_csv('/content/water_potability.csv')

print(data.head())

data[data['Potability']==0][['ph','Sulfate','Trihalomethanes']].median()

data['ph'].fillna(value=data['ph'].median(),inplace=True)
data['Trihalomethanes'].fillna(value=data['Trihalomethanes'].median(),inplace=True)
data = data.dropna()

# Memisahkan fitur dan target
X = data.drop('Potability', axis=1)
y = data['Potability']

data.isnull().sum()

X = data.drop('Potability',axis=1).values
y = data['Potability'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

scaler.fit(X_train)

model = tf.keras.Sequential([
    tf.keras.layers.Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Ringkasan model
model.summary()

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

print('training shape : ',X_train.shape)
print('testing shape : ',X_test.shape)

model = Sequential() # Initialising the ANN

model.add(Dense(units = 16, kernel_initializer = 'uniform', activation = 'relu'))
model.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu'))
model.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))
model.add(Dense(units = 2, kernel_initializer = 'uniform', activation = 'relu'))
model.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))
model.compile(optimizer = 'adam', loss = 'binary_crossentropy')

model.fit(x=X_train,
          y=y_train,
          epochs=100,
          validation_data=(X_test, y_test), verbose=1
          )

test_loss, test_acc = model.evaluate(X_test, y_test)
print('Test Accuracy:', test_acc)

_, accuracy = model.evaluate(X_test, y_test)
print('Accuracy: %.2f' % (accuracy*100))

model.fit(x=X_train,
          y=y_train,
          epochs=200,
          validation_data=(X_test, y_test), verbose=1
          )

_, accuracy = model.evaluate(X_test, y_test)
print('Accuracy: %.2f' % (accuracy*100))

model.fit(x=X_train,
          y=y_train,
          epochs=300,
          validation_data=(X_test, y_test), verbose=1
          )

_, accuracy = model.evaluate(X_test, y_test)
print('Accuracy: %.2f' % (accuracy*100))

predictions = model.predict(X_test)
print(predictions[:5])  # Menampilkan 5 prediksi pertama

print("Masukkan nilai untuk fitur berikut:")
pH = float(input("pH: "))
hardness = float(input("Hardness: "))
solids = float(input("Solids: "))
chloramines = float(input("Chloramines: "))
sulfate = float(input("Sulfate: "))
conductivity = float(input("Conductivity: "))
organic_carbon = float(input("Organic Carbon: "))
trihalomethanes = float(input("Trihalomethanes: "))
turbidity = float(input("Turbidity: "))

# Membuat DataFrame dari input
input_data = pd.DataFrame({
    'pH': [pH],
    'Hardness': [hardness],
    'Solids': [solids],
    'Chloramines': [chloramines],
    'Sulfate': [sulfate],
    'Conductivity': [conductivity],
    'Organic_carbon': [organic_carbon],
    'Trihalomethanes': [trihalomethanes],
    'Turbidity': [turbidity]
})

# Normalisasi data input
input_normalized = scaler.transform(input_data)

# Menggunakan model untuk membuat prediksi
prediction = model.predict(input_normalized)
predicted_label = (prediction > 0.5).astype(int)  # Mengasumsikan threshold 0.5 untuk klasifikasi

# Menampilkan hasil prediksi
print(f"Prediksi kualitas air (0: Tidak layak minum, 1: Layak minum): {predicted_label[0]}")

import pickle

# Menyimpan model
filename = 'model_water_quality_prediction.sav'  # Memperbaiki spasi yang tidak perlu dalam nama file
with open(filename, 'wb') as file:
    pickle.dump(model, file)